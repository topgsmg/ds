1..

#include<stdio.h>
#include<stdlib.h>
struct DAY
{
char *dayname;
int date;
char *activity;
};
void create(struct DAY *day)
{
day->dayname=(char *)malloc(sizeof(char)*20);
day->activity=(char *)malloc(sizeof(char)*50);
printf("Enter the name of the day ");
scanf("%s",day->dayname);
printf("Enter the date for the day”);
scanf("%d",&day->date);
printf("Enter the activity for the day”);
scanf("%s",day->activity);
}
void read(struct DAY *calendar, int size)
{
for(int i=0;i<size;i++)
{
printf(“Enter details for day %d”i+1);
create(&calendar[i]);
}
}
void display(struct DAY *calendar, int size)
{
printf("Activity Details”);
printf("_________________________________________");
printf("Day\t\tName of the day\tDate\tActivity\n");
printf("__________________________________________");
for(int i=0;i<size;i++)
printf("%d\t\t%s\t\t%d\t%s\n",i+1,calendar[i].dayname,calendar[i].date,calendar[i].activity);
}
void freememory(struct DAY *calendar,int size)
{
for(int i=0;i<size;i++)
{
free(calendar[i].dayname);
free(calendar[i]activity);
}
}
int main()
{
int size;
printf(“Enter the number of days in the week”);
scanf(“%d”,&size);
struct DAY *calendar=(struct DAY *)malloc(sizeof(struct DAY)* size);
if(calendar==NULL)
{
printf(“Memory allocation failed”);
return 1;
}
read(calendar,size);
display(calendar,size);
freememory(calendar,size);
free(calendar);
return 0;
}


2..

#include<stdio.h>
char str[100], pat[50], rep[50], ans[100];
int i, j, c, m, k, flag=0;
void stringmatch()
{
i=m=c=j=0;
while(str[c]!='\0')
{
if(str[m]==pat[i])
{
i++;
m++;
if(pat[i]=='\0')
{
flag = 1;
for(k = 0; rep[k] != '\0'; k++, j++)
ans[j] = rep[k];
i = 0;
c = m;
}
}
else
{
ans[j] = str[c];
j++;
c++;
m = c;
i = 0;
}
}
ans[j] = '\0';
}
void main()
{
printf("\nEnter a main string \n");
gets(str);
printf("\nEnter a pattern string \n");
flushall();
gets(pat);
printf("\nEnter a replace string \n");
flushall();
gets(rep);
stringmatch();
if(flag==1)
printf("\nThe resultant string is\n %s" ,ans);
else
printf("\nPattern string NOT found\n");
}


3..

#include<stdio.h>
#define MAX 4
int stack[MAX], item;
int ch, top = -1,status = 0;
/*PUSH FUNCTION*/
void push(int stack[], int item)
{
if (top == (MAX-1))
printf("\n\nStack is Overflow");
else
{
stack[++top] =item;
status++;
}
}
/*POP FUNCTION*/
int pop(int stack[])
{
int itemdel;
if(top == -1)
printf("\n\nStack is Underflow");
else
{
itemdel = stack[top--];
status--;
printf("\n Popped element is %d", itemdel);
}
return itemdel;
}
/* FUNCTION TO CHECK STACK IS PALINDROME OR NOT */
void palindrome(int stack[])
{
int flag=1,i;
printf(" Stack contents are:\n");
for(i=top; i>=0; i--)
printf(“|%d|\n”,s[i]);
printf(“\n Reverse of stack content are:\n”);
for(i=0;i<=top;i++)
printf(“|%d|\n”,s[i]);
for(i=0;i<=top/2;i++)
{
if(s[i]!=s[top-i])
{
flag=0;
break;
}
}
if(flag==1)
{
printf(“palindrome”);
}
else
{
printf(“Not a palindrome”);
}
}
void display(int stack[])
{
int i;
if(top == -1)
printf("\nStack is Empty");
else
{
printf("stack contents are\n");
for(i=top; i>=0; i--)
printf("\n ------\n| %d |", stack[i]);
printf("\n");
}
}
/*MAIN PROGRAM*/
void main()
{
clrscr();
do
{
printf("\n\n----MAIN MENU----\n");
printf("\n1. PUSH (Insert) in the Stack");
printf("\n2. POP (Delete) from the Stack");
printf("\n3. PALINDROME check using Stack");
printf("\n4. DISPLAY the contents of Stack");
printf("\n5. Exit (End the Execution)");
printf("\nEnter Your Choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: printf("\nEnter a element to be pushed: ");
scanf("%d", &item);
push(stack, item);
display(stack);
break;
case 2: item=pop(stack);
break;
case 3:palindrome(stack);
break;
case 4: display(stack);
break;
case 5:exit(0);
default: printf("\n Invalid choice");
break;
}//end switch
}while (ch != 5);
}

4...

#include<stdio.h>
#include<string.h>
int stkpre(char symbol)
{
switch(symbol)
{
case '+' :
case '-': return 2;
case '*':
case '/': return 4;
case '^':
case '$': return 5;
case '(': return 0;
case '#': return -1;
default: return 8;
}
}
int inpre(char symbol)
{
switch(symbol)
{
case '+':
case '-': return 1;
case '*':
case '/': return 3;
case '^':
case '$': return 6;
case '(': return 9;
case ')': return 0;
default: return 7;
}
}
void infix_postfix(char infix[], char postfix[])
{
int top, j, i;
char s[30], symbol;
top = -1;
s[++top] = '#';
j = 0;
for(i=0; i < strlen(infix); i++)
{
symbol = infix[i];
while(stkpre(s[top]) > inpre(symbol))
{
postfix[j] = s[top--];
j++;
}
if(stkpre(s[top]) != inpre(symbol))
s[++top] = symbol;
else
top--;
}
while(s[top] != '#')
{
postfix[j++] = s[top--];
}
postfix[j] = '\0';
}
void main()
{
char infix[20], postfix[20];
clrscr();
printf("Enter a valid infix expression\n");
gets(infix);
infix_postfix(infix,postfix);
printf("The postfix expression is:\n");
printf ("%s",postfix);
}


5..

a..
#include<stdio.h>
#include<math.h>
#include<string.h>
double compute(char symbol, double op1, double op2)
{
switch(symbol)
{
case '+': return op1 + op2;
case' -': return op1 - op2;
case '*': return op1 * op2;
case '/': return op1 / op2;
case '$':
case '^': return pow(op1,op2);
default: return 0;
}
}
void main()
{
double s[20], res, op1, op2;
int top, i;
char postfix[20], symbol;
printf("\nEnter the postfix expression:\n");
gets(postfix);
top=-1;
for(i=0; i<strlen(postfix); i++)
{
symbol = postfix[i];
if(isdigit(symbol))
s[++top] = symbol - '0';
else
{
op2 = s[top--];
op1 = s[top--];
res = compute(symbol, op1, op2);
s[++top] = res;
}
}
res = s[top--];
printf("\nThe result is : %f\n", res);
}

b...

#include<stdio.h>
#include<math.h>
int count=0;
void tower(int n, int src, int temp,int dest)
{
if(n == 0)
return;
tower(n-1, src, dest, temp);
printf("\n Move disc %d from %c to %c", n, src, dest);
count++;
tower(n-1, temp, src, dest);
}
void main()
{
int n;
printf("\n Enter the number of discs: \n");
scanf("%d", &n);
tower(n, 'A', 'B', 'C');
printf("\n total number of moves = %d",count);
}


6..

#include<stdio.h>
#define MAX 4
int ch, front = 0, rear = -1, count=0, q[MAX], item;
void insert(int item, int *rear, int *q, int *count)
{
if(*count == MAX)
printf("Circular Queue is Full\n");
else
{
*rear = (*rear + 1) % MAX;
q[*rear]=item;
(*count)++;
}
}
void del(int *front, int *q, int *count)
{
if(*count == 0)
printf("Circular Queue is underflow\n");
else
{
item=q[*front];
printf("\nDeleted item is: %d",item);
*front = (*front + 1) % MAX;
(*count)--;
}
}
void display(int front, int q[], int count)
{
int i;
if(count == 0)
printf("\nCircular Queue is Empty");
else
{
printf("\nContents of Circualr Queue is:\n");
for(i=1; i<=count; i++)
{
printf("%d\t", q[front]);
front = (front + 1) % MAX;
}
}
}
void main()
{
do
{
printf("\n1. Insert\n2. Delete\n3. Display\n4. Exit");
printf("\nEnter the choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: printf("\nEnter the item to be inserted: ");
scanf("%d", &item);
insert(item, &rear, q, &count);
break;
case 2: del(&front, q, &count);
break;
case 3: display(front, q, count);
break;
case 4: exit(0);
break;
}
}while(ch!=4);
}

7...

#include<stdio.h>
int MAX=4,count;
struct student
{
char usn[10];
char name[30];
char branch[5];
int sem;
int phno[10];
struct student *next; //Self referential pointer.
};
typedef struct student NODE;
int countnodes(NODE *head)
{
NODE *p;
count=0;
p=head;
while(p!=NULL)
{
p=p->next;
count++;
}
return count;
}
NODE* getnode(NODE *head)
{
NODE *newnode;
newnode=(NODE*)malloc(sizeof(NODE)); //Create first NODE
printf("\nEnter USN, Name, Branch, Sem, Ph.No\n");
gets(newnode->usn);
flushall();
gets(newnode->name);
flushall();
gets(newnode->branch);
scanf("%d",&(newnode->sem));
scanf("%d",&(newnode->phno));
newnode->next=NULL; //Set next to NULL...
head=newnode;
return head;
}
NODE* display(NODE *head)
{
NODE *p;
if(head == NULL)
printf("\n No student data\n");
else
{
p=head;
printf("\n----STUDENT DATA----\n");
printf("\nUSN\tNAME\t\tBRANCH\tSEM\tPh.NO.");
while(p!=NULL)
{
printf("\n%s\t%s\t\t%s\t%d\t%s", p->usn, p->name, p->branch, p->sem, p->phno);
p=p->next; //Go to next node...
}
printf("\n The no. of nodes in list is: %d",countnodes(head));
}
return head;
}
NODE* create(NODE *head)
{
NODE *newnode;
if(head==NULL)
{
newnode=getnode(head);
head=newnode;
}
else
{
newnode=getnode(head);
newnode->next=head;
head=newnode;
}
return head;
}
NODE* insert_front(NODE *head)
{
if(countnodes(head)==MAX)
printf("\nList is Full / Overflow!!");
else
head=create(head); //create()insert nodes at front
return head;
}
NODE* insert_rear(NODE *head)
{
NODE *p, *newnode; p=head;
if(countnodes(head) == MAX)
printf("\nList is Full(QUEUE)!!");
else
{
if(head == NULL)
{
newnode=getnode(head);
head=newnode; //set first node to be head
}
else
{
newnode=getnode(head);
while(p->next!=NULL)
{
p=p->next;
}
p->next=newnode;
}
}
return head;
}
NODE* insert(NODE *head)
{
int ch;
do
{
printf("\n1.Insert at Front(First)\t2.Insert at End(Rear/Last)\t3.Exit");
printf("\nEnter your choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: head=insert_front(head);
break;
case 2: head=insert_rear(head);
break;
case 3: break;
}
head=display(head);
}while(ch!=3);
return head;
}
NODE* delete_front(NODE *head)
{
NODE *p;
if(head==NULL)
printf("\nList is Empty/Underflow(STACK)");
else
{
p=head;
p=p->next; //Set 2nd NODE as head free(p);
printf("\n Front(first)node is deleted");
}
return head;
}
NODE* delete_rear(NODE *head)
{
NODE *p, *q; p=head; q=NULL;
while(p->next!=NULL)
{
q=p;
p=p->next; //Go upto -1 NODE which you want to delete
}
q->next=NULL;
free(p); //Delete last NODE
p->next=NULL;
printf("\n Last(end) entry is deleted");
return head;
}
NODE* del(NODE *head)
{
int ch;
do
{
printf("\n1.Delete from Front(First)\t2. Delete from
End(Rear/Last))\t3.Exit");
printf("\nEnter your choice: ");
scanf("%d",&ch);
switch(ch)
{
case 1: head=delete_front(head); break;
case 2: head=delete_rear(head); break;
case 3: break;
}
head=display(head);
}
while(ch!=3);
return head;
}
NODE* stack(NODE *head)
{
int ch;
do
{
printf("\nSSL used as Stack...");
printf("\n 1.Insert at Front(PUSH) \t 2.Delete from Front(POP))\t3.Exit");
printf("\nEnter your choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: head=insert_front(head); break;
case 2: head=delete_front(head); break;
case 3: break;
}
head=display(head);
}while(ch!=3);
return head;
}
void main()
{
int ch, i, n;
NODE *head;
head=NULL;
printf("\n*----------Studednt Database-----------*");
do
{
printf("\n 1.Create\t 2.Display\t 3.Insert\t 4.Delete\t 5.Stack\t 6.Exit");
printf("\nEnter your choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: printf("\nHow many student data you want to create: ");
scanf("%d", &n);
for(i=0;i<n;i++)
head=create(head); //Call to Create NODE...
break;
case 2: head=display(head); //Call to Display...
break;
case 3: head=insert(head); //Call to Insert...
break;
case 4: head=del(head); //Call to delete
break;
case 5: head=stack(head);
break;
case 6: exit(); //Exit...
}
}while(ch!=6);
}




8....
#include<stdio.h>
int MAX=4, count;
struct emp
{
int ssn;
char name[20];
char dept[10];
char desig[15];
int sal;
char phno[10];
struct emp *left;
struct emp *right;
};
typedef struct emp NODE;
int countnodes(NODE *head)
{
NODE *p;
count=0;
p=head;
while(p!=NULL)
{
p=p->right;
count++;
}
return count;
}
NODE* getnode(NODE *head)
{
NODE *newnode;
newnode=(NODE*)malloc(sizeof(NODE));
newnode->right=newnode->left=NULL;
printf("\nEnter SSN, Name, Dept, Designation, Sal,Ph.No\n");
scanf("%d",&newnode->ssn);
flushall();
gets(newnode->name);
flushall();
gets(newnode->dept);
flushall();
gets(newnode->desig);
scanf("%d",&newnode->sal);
flushall();
gets(newnode->phno);
head=newnode;
return head;
}
NODE* display(NODE *head)
{
NODE *p;
if(head==NULL)
printf("\nNo Employee data\n");
else
{
p=head;
printf("\n----EMPLOYEE DATA----\n");
printf("\nSSN\tNAME\tDEPT\tDESINGATION\tSAL\t\tPh.NO.");
while(p!=NULL)
{
printf("\n%d\t%s\t%s\t%s\t\t%d\t\t%s", p->ssn, p->name, p->dept, p->desig,
p- >sal, p->phno);
p = p->right; //Go to next node...
}
printf("\nThe no. of nodes in list is: %d", countnodes(head));
}
return head;
}
NODE* create(NODE *head) // creating & inserting at end.
{
NODE *p, *newnode;
p=head;
if(head==NULL)
{
newnode=getnode(head);
head=newnode;
}
else
{
newnode=getnode(head);
while(p->right!=NULL)
{
p=p->right;
}
p->right=newnode;
newnode->left=p;
}
return head;
}
NODE* insert_end(NODE *head)
{
if(countnodes(head)==MAX)
printf("\nList is Full!!");
else
head=create(head);
return head;
}
NODE* insert_front(NODE *head)
{
NODE *p, *newnode;
if(countnodes(head)==MAX)
printf("\nList is Full!!");
else
{
if(head==NULL)
{
newnode=getnode(head);
head=newnode; //set first node to be head
}
else
{
newnode=getnode(head);
newnode->right=head;
head->left=newnode;
head=newnode;
}
}
return head;
}
NODE* insert(NODE *head)
{
int ch;
do
{
printf("\n 1.Insert at Front(First) \t 2.Insert at End(Rear/Last)\t3.Exit");
printf("\nEnter your choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: head=insert_front(head); break;
case 2: head=insert_end(head); break;
case 3: break;
}
head=display(head);
} while(ch!=3);
return head;
}
NODE* delete_front(NODE *head)
{
NODE *p;
if(head==NULL)
printf("\nList is Empty (QUEUE)");
else
{
p=head;
head=head->right;
head->right->left=NULL;
free(p);
printf("\nFront(first)node is deleted");
}
return head;
}
NODE* delete_end(NODE *head)
{
NODE *p, *q;
q=NULL;
p=head;
while(p->right!=NULL)
{
q=p;
p=p->right; //Go upto -1 node which you want to delete
}
q->right=NULL;
free(p); //Delete last node...
printf("\nLast(end) entry is deleted");
return head;
}
NODE *del(NODE *head)
{
int ch;
do
{
printf("\n1.Delete from Front(First)\t2. Delete from End(Rear/Last))\t3.Exit");
printf("\nEnter your choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: head=delete_front(head); break;
case 2: head=delete_end(head); break;
case 3: break;
}
head=display(head);
}while(ch!=3);
return head;
}
NODE* dqueue(NODE *head)
{
int ch;
do
{
printf("\n DLL used as Double Ended Queue");
printf("\n 1. Insert at Rear \n
2. Delete from Front\n
3.Insert at Front \n
4.Delete from Rear\n
5.display\n
6. exit");
printf("\nEnter your choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: head=insert_end(head); break;
case 2: head=delete_front(head); break;
case 3: head=insert_front(head); break;
case 4: head=delete_end(head); break;
case 5: head=display(head);break;
case 6: break;
}
}while(ch!=6);
return head;
}
void main()
{
int ch, i, n;
NODE *head;
head=NULL;
printf("\n----------Employee Database-----------");
do
{
printf("\n1.Create\t2.Display\t3.Insert\t4.Delete\t5.Queue\t6.Exit");
printf("\nEnter your choice: ");
scanf("%d",&ch);
switch(ch)
{
case 1: printf("\nHow many employees data you want to create: ");
scanf("%d", &n);
for(i=0;i<n;i++)
head=create(head); //Call to Create node...
break;
case 2: head=display(head); //Call to Display...
break;
case 3: head=insert(head); //Call to Insert...
break;
case 4: head=del(head); //Call to delete
break;
case 5: head=dqueue(head);
break;
case 6: exit(0); //Exit...
break;
}
}while(ch!=6);
}



10.......
#include<stdio.h>
#include<stdlib.h>
struct node
{
int info;
struct node *llink;
struct node *rlink;
};
typedef struct node NODE;
NODE *insert(int item,NODE *root)
{
NODE *temp,*cur,*prev;
temp=(NODE *)malloc(sizeof(NODE));
temp->info=item;
temp->llink=NULL;
temp->rlink=NULL;
if(root==NULL)
return temp;
prev=NULL;
cur=root;
while(cur!=NULL)
{
prev=cur;
cur=(item<=cur->info)?cur->llink:cur->rlink;
}
if(item<prev->info)
prev->llink=temp;
else
prev->rlink=temp;
return root;
}
NODE *construct_BST(NODE *root)
{
int a,n,i;
printf("Enter the number of elements\n");
scanf("%d",&n);
printf("Enter the elements to be inserted in the tree\n");
for (i=0;i<n;i++)
{
scanf("%d",&a);
root=insert(a,root);
}
printf("Tree Constructed Successfully!!!!!!\n");
return root;
}
void preorder(NODE *root)
{
if(root!=NULL)
{
printf("%d\t",root->info);
preorder(root->llink);
preorder(root->rlink);
}
}
void inorder(NODE *root)
{
if(root!=NULL)
{
inorder(root->llink);
printf("%d\t",root->info);
inorder(root->rlink);
}
}
void postorder(NODE *root)
{
if(root!=NULL)
{
postorder(root->llink);
postorder(root->rlink);
printf("%d\t",root->info);
}
}
int search_element(NODE *root,int key)
{
NODE *cur;
int n=0;
cur=root;
if (cur!=NULL)
{
if (key==cur->info)
n=1;
else if (key<cur->info)
return search_element(cur->llink,key);
else
return search_element(cur->rlink,key);
}
else
return n;
}
void main()
{
int item,ch,key,n;
NODE *root;
root=NULL;
while (1)
{
printf(" 1.Construct BST\n
2.Preorder\n
3.Inorder\n
4.Postorder\n
5.Search an Element\n
6:Exit\n");
printf("\nEnter the choice\n");
scanf("%d",&ch);
switch(ch)
{
case 1: root=construct_BST(root);
break;
case 2: preorder(root);
break;
case 3: inorder(root);
break;
case 4: postorder(root);
break;
case 5: if (root==NULL)
printf("List Empty\n");
else
{
printf("Enter the element\n");
scanf("%d",&key);
n=search_element(root,key);
if(n)
printf("Key found\n");
else
printf("Not found\n");
}
break;
case 6: exit(0);
default: printf("Wrong Choice\n");
}
}
}



11........
#include<stdio.h>
#include<stdlib.h>
void bfs(int a[10][10], int n, int u)
{
Int f,r,q[10],v;
int s[10]={0};//initialize all elem in s to 0, no node visited
printf("The nodes visited from %d:",u);
f=0, r=-1;// Q empty
q[++r]=u; // Insert u into Q
s[u]=1; // Insert u to s
printf("%d",u); //pritn node visited
while(f<=r)
{
u=q[f++]; //del an elem from Q
for(v=1; v<=n; v++)
{
if(a[u][v]==1)
{
if(s[v]==0) // If v is not in S i.e, V has not been visited
{
printf("%d",v); // print the node visited
s[v]=1; //add v to s,mark as visited
q[++r]=v; //insert v into Q
}
}
}
}
printf("\n");
}
void main()
{
int n,a[10][10], source, i,j;
printf("Enter the number of nodes:");
scanf("%d",&n);
printf("Enter the adjacency matrix:\n");
for(i=1; i<=n; i++)
{
for(j=1; j<=n; j++)
{
scanf("%d", &a[i][j]);
}
}
printf(" enter the source vertex\n");
scanf("%d", &source);
bfs(a,n,source);
}

b....
#include<stdio.h>
#include<stdlib.h>
int visited[10];
int a[10][10];
int n;
void readadjmatrix();
void dfs(int);
void main()
{
int start;clrscr(); readadjmatrix();
printf("Enter the starting vertex:\n");
scanf("%d",&start);
dfs(start);
}
void readadjmatrix()
{
int i,j;
printf("Enter the number of vertices:\n");
scanf("%d",&n);
printf("Enter adjacency matrix\n"); for(i=1;i<=n;i++)
for(j=1;j<=n;j++)
scanf("%d",&a[i][j]);
}
void dfs(int v)
{
int w;
visited[v]=1;
for(w=1;w<=n;w++)
{
if(visited[w]==0&&a[v][w]==1)
{
printf("%d",w);
dfs(w);
}
}
}

12........

#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#define HASH_SIZE 100
typedef struct employee
{
int id;
char name[20];
}EMPLOYEE;
/*Create initial hash table*/
void initialize_hash_table(EMPLOYEE a[])
{
int i;
for(i=0; i<HASH_SIZE; i++)
{
a[i].id=0;
}
}
int H(int k)
{
return k % HASH_SIZE;
}
/*Insert an item into the empty slot using linear probing*/
void insert_hash_table(int id, char name[], EMPLOYEE a[])
{
int i,index,h_value;
h_value= H(id);
for(i=0; i<HASH_SIZE; i++)
{
index=(h_value+i)% HASH_SIZE;
if(a[index].id==0) //empty slot found
{
a[index].id=id; //insert employee id
strcpy(a[index].name,name); //insert employee name
break;
}
}
if(i==HASH_SIZE) printf("Hash table full\n"); // NO empty slot
}
/*Display the hash table*/
void display_hash_table(EMPLOYEE a[], int n)
{
int k,i;
printf("H_Value\t Emp_id\t Emp_name\n");
for(i=0; i<n; i++)
{
if(a[i].id!=0)
printf("%d\t %d\t %s\n",i,a[i].id,a[i].name);
}
}
void main()
{
EMPLOYEE a[HASH_SIZE];
char name[20];
int key,id,choice,flag;
initialize_hash_table(a); //Create intial hash table
while(1)
{
printf("1:Insert 2:Display 3:Exit\n");
printf("Enter the choice:");
scanf("%d",&choice);
switch(choice)
{
case 1:printf("Enter emp id:");
scanf("%d",&id);
printf("Enter the name:");
scanf("%s",name);
insert_hash_table(id,name,a);
break;
case 2: printf("Contents of hash table\n");
display_hash_table(a,HASH_SIZE);
printf("\n");
break;
case 3: exit(0);
default: printf("Invalid choice\n");
}
}
}




1
