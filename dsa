1..

#include<stdio.h>
#include<stdlib.h>
struct DAY
{
char *dayname;
int date;
char *activity;
};
void create(struct DAY *day)
{
day->dayname=(char *)malloc(sizeof(char)*20);
day->activity=(char *)malloc(sizeof(char)*50);
printf("Enter the name of the day ");
scanf("%s",day->dayname);
printf("Enter the date for the day”);
scanf("%d",&day->date);
printf("Enter the activity for the day”);
scanf("%s",day->activity);
}
void read(struct DAY *calendar, int size)
{
for(int i=0;i<size;i++)
{
printf(“Enter details for day %d”i+1);
create(&calendar[i]);
}
}
void display(struct DAY *calendar, int size)
{
printf("Activity Details”);
printf("_________________________________________");
printf("Day\t\tName of the day\tDate\tActivity\n");
printf("__________________________________________");
for(int i=0;i<size;i++)
printf("%d\t\t%s\t\t%d\t%s\n",i+1,calendar[i].dayname,calendar[i].date,calendar[i].activity);
}
void freememory(struct DAY *calendar,int size)
{
for(int i=0;i<size;i++)
{
free(calendar[i].dayname);
free(calendar[i]activity);
}
}
int main()
{
int size;
printf(“Enter the number of days in the week”);
scanf(“%d”,&size);
struct DAY *calendar=(struct DAY *)malloc(sizeof(struct DAY)* size);
if(calendar==NULL)
{
printf(“Memory allocation failed”);
return 1;
}
read(calendar,size);
display(calendar,size);
freememory(calendar,size);
free(calendar);
return 0;
}


2..

#include<stdio.h>
char str[100], pat[50], rep[50], ans[100];
int i, j, c, m, k, flag=0;
void stringmatch()
{
i=m=c=j=0;
while(str[c]!='\0')
{
if(str[m]==pat[i])
{
i++;
m++;
if(pat[i]=='\0')
{
flag = 1;
for(k = 0; rep[k] != '\0'; k++, j++)
ans[j] = rep[k];
i = 0;
c = m;
}
}
else
{
ans[j] = str[c];
j++;
c++;
m = c;
i = 0;
}
}
ans[j] = '\0';
}
void main()
{
printf("\nEnter a main string \n");
gets(str);
printf("\nEnter a pattern string \n");
flushall();
gets(pat);
printf("\nEnter a replace string \n");
flushall();
gets(rep);
stringmatch();
if(flag==1)
printf("\nThe resultant string is\n %s" ,ans);
else
printf("\nPattern string NOT found\n");
}


3..

#include<stdio.h>
#define MAX 4
int stack[MAX], item;
int ch, top = -1,status = 0;
/*PUSH FUNCTION*/
void push(int stack[], int item)
{
if (top == (MAX-1))
printf("\n\nStack is Overflow");
else
{
stack[++top] =item;
status++;
}
}
/*POP FUNCTION*/
int pop(int stack[])
{
int itemdel;
if(top == -1)
printf("\n\nStack is Underflow");
else
{
itemdel = stack[top--];
status--;
printf("\n Popped element is %d", itemdel);
}
return itemdel;
}
/* FUNCTION TO CHECK STACK IS PALINDROME OR NOT */
void palindrome(int stack[])
{
int flag=1,i;
printf(" Stack contents are:\n");
for(i=top; i>=0; i--)
printf(“|%d|\n”,s[i]);
printf(“\n Reverse of stack content are:\n”);
for(i=0;i<=top;i++)
printf(“|%d|\n”,s[i]);
for(i=0;i<=top/2;i++)
{
if(s[i]!=s[top-i])
{
flag=0;
break;
}
}
if(flag==1)
{
printf(“palindrome”);
}
else
{
printf(“Not a palindrome”);
}
}
void display(int stack[])
{
int i;
if(top == -1)
printf("\nStack is Empty");
else
{
printf("stack contents are\n");
for(i=top; i>=0; i--)
printf("\n ------\n| %d |", stack[i]);
printf("\n");
}
}
/*MAIN PROGRAM*/
void main()
{
clrscr();
do
{
printf("\n\n----MAIN MENU----\n");
printf("\n1. PUSH (Insert) in the Stack");
printf("\n2. POP (Delete) from the Stack");
printf("\n3. PALINDROME check using Stack");
printf("\n4. DISPLAY the contents of Stack");
printf("\n5. Exit (End the Execution)");
printf("\nEnter Your Choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: printf("\nEnter a element to be pushed: ");
scanf("%d", &item);
push(stack, item);
display(stack);
break;
case 2: item=pop(stack);
break;
case 3:palindrome(stack);
break;
case 4: display(stack);
break;
case 5:exit(0);
default: printf("\n Invalid choice");
break;
}//end switch
}while (ch != 5);
}

4...

#include<stdio.h>
#include<string.h>
int stkpre(char symbol)
{
switch(symbol)
{
case '+' :
case '-': return 2;
case '*':
case '/': return 4;
case '^':
case '$': return 5;
case '(': return 0;
case '#': return -1;
default: return 8;
}
}
int inpre(char symbol)
{
switch(symbol)
{
case '+':
case '-': return 1;
case '*':
case '/': return 3;
case '^':
case '$': return 6;
case '(': return 9;
case ')': return 0;
default: return 7;
}
}
void infix_postfix(char infix[], char postfix[])
{
int top, j, i;
char s[30], symbol;
top = -1;
s[++top] = '#';
j = 0;
for(i=0; i < strlen(infix); i++)
{
symbol = infix[i];
while(stkpre(s[top]) > inpre(symbol))
{
postfix[j] = s[top--];
j++;
}
if(stkpre(s[top]) != inpre(symbol))
s[++top] = symbol;
else
top--;
}
while(s[top] != '#')
{
postfix[j++] = s[top--];
}
postfix[j] = '\0';
}
void main()
{
char infix[20], postfix[20];
clrscr();
printf("Enter a valid infix expression\n");
gets(infix);
infix_postfix(infix,postfix);
printf("The postfix expression is:\n");
printf ("%s",postfix);
}


5..

a..
#include<stdio.h>
#include<math.h>
#include<string.h>
double compute(char symbol, double op1, double op2)
{
switch(symbol)
{
case '+': return op1 + op2;
case' -': return op1 - op2;
case '*': return op1 * op2;
case '/': return op1 / op2;
case '$':
case '^': return pow(op1,op2);
default: return 0;
}
}
void main()
{
double s[20], res, op1, op2;
int top, i;
char postfix[20], symbol;
printf("\nEnter the postfix expression:\n");
gets(postfix);
top=-1;
for(i=0; i<strlen(postfix); i++)
{
symbol = postfix[i];
if(isdigit(symbol))
s[++top] = symbol - '0';
else
{
op2 = s[top--];
op1 = s[top--];
res = compute(symbol, op1, op2);
s[++top] = res;
}
}
res = s[top--];
printf("\nThe result is : %f\n", res);
}

b...

#include<stdio.h>
#include<math.h>
int count=0;
void tower(int n, int src, int temp,int dest)
{
if(n == 0)
return;
tower(n-1, src, dest, temp);
printf("\n Move disc %d from %c to %c", n, src, dest);
count++;
tower(n-1, temp, src, dest);
}
void main()
{
int n;
printf("\n Enter the number of discs: \n");
scanf("%d", &n);
tower(n, 'A', 'B', 'C');
printf("\n total number of moves = %d",count);
}


6..

#include<stdio.h>
#define MAX 4
int ch, front = 0, rear = -1, count=0, q[MAX], item;
void insert(int item, int *rear, int *q, int *count)
{
if(*count == MAX)
printf("Circular Queue is Full\n");
else
{
*rear = (*rear + 1) % MAX;
q[*rear]=item;
(*count)++;
}
}
void del(int *front, int *q, int *count)
{
if(*count == 0)
printf("Circular Queue is underflow\n");
else
{
item=q[*front];
printf("\nDeleted item is: %d",item);
*front = (*front + 1) % MAX;
(*count)--;
}
}
void display(int front, int q[], int count)
{
int i;
if(count == 0)
printf("\nCircular Queue is Empty");
else
{
printf("\nContents of Circualr Queue is:\n");
for(i=1; i<=count; i++)
{
printf("%d\t", q[front]);
front = (front + 1) % MAX;
}
}
}
void main()
{
do
{
printf("\n1. Insert\n2. Delete\n3. Display\n4. Exit");
printf("\nEnter the choice: ");
scanf("%d", &ch);
switch(ch)
{
case 1: printf("\nEnter the item to be inserted: ");
scanf("%d", &item);
insert(item, &rear, q, &count);
break;
case 2: del(&front, q, &count);
break;
case 3: display(front, q, count);
break;
case 4: exit(0);
break;
}
}while(ch!=4);
}
